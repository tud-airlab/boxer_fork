<?xml version="1.0"?>

<robot name="boxer" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:arg name="robot_namespace" default="/"/>
  <xacro:arg name="lidar_rays" default="720"/>

  <!-- Simulation for BOXER's IMU. -->
  <gazebo>
    <plugin name="imu_controller" filename="libhector_gazebo_ros_imu.so">
      <robotNamespace>$(arg robot_namespace)</robotNamespace>
      <updateRate>50.0</updateRate>
      <bodyName>imu_link</bodyName>
      <topicName>imu/data</topicName>
      <accelDrift>0.005 0.005 0.005</accelDrift>
      <accelGaussianNoise>0.005 0.005 0.005</accelGaussianNoise>
      <rateDrift>0.005 0.005 0.005 </rateDrift>
      <rateGaussianNoise>0.005 0.005 0.005 </rateGaussianNoise>
      <headingDrift>0.005</headingDrift>
      <headingGaussianNoise>0.005</headingGaussianNoise>
    </plugin>
  </gazebo>

  <gazebo>
    <!-- Plugin for ros_control (actuate drive motors, lift). -->
    <!-- <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>$(arg robot_namespace)</robotNamespace>
      <robotParam>robot_description</robotParam>
    </plugin> -->

    <!-- Groud Truth Position, Pose, and Rates plugin -->
    <plugin name="gazebo_ros_p3d" filename="libgazebo_ros_p3d.so">
      <bodyName>base_link</bodyName>
      <topicName>ground_truth_odom</topicName>
      <alwaysOn>true</alwaysOn>
      <updateRate>100.0</updateRate>
    </plugin>

    <!-- BOXER Platform Plugin -->
    <plugin name="boxer_platform_plugin" filename="libboxer_gazebo_plugins.so">
      <robotNamespace>$(arg robot_namespace)</robotNamespace>
    </plugin>

  </gazebo>

  <gazebo reference="front_laser">
    <sensor type="ray" name="front_laser_link">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>16</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>$(arg lidar_rays)</samples>
            <resolution>1</resolution>
            <min_angle>-2.35619</min_angle>
            <max_angle>2.35619</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.001</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_laser" filename="libgazebo_ros_laser.so">
        <robotNamespace>$(arg robot_namespace)</robotNamespace>
        <topicName>front/scan</topicName>
        <frameName>front_laser</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="rear_left_sonar_link">
    <sensor type="ray" name="rear_left_sonar">
      <always_on>true</always_on>
      <update_rate>5</update_rate>
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>5</samples>
            <resolution>1</resolution>
            <min_angle>-0.13083332777</min_angle>
            <max_angle>0.13083332777</max_angle>
          </horizontal>
          <vertical>
            <samples>5</samples>
            <resolution>1</resolution>
            <min_angle>-0.13083332777</min_angle>
            <max_angle>0.13083332777</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.1</min>
          <max>1.2</max>
          <resolution>0.01</resolution>
        </range>
      </ray>

      <plugin name="gazebo_ros_rear_left_sonar_controller" filename="libhector_gazebo_ros_sonar.so">
        <gaussianNoise>0.005</gaussianNoise>
        <topicName>/sonar/left</topicName>
        <frameId>rear_left_sonar_link</frameId>
        <updateRate>5</updateRate>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="rear_right_sonar_link">
    <sensor type="ray" name="rear_right_sonar">
      <always_on>false</always_on>
      <update_rate>5</update_rate>
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>5</samples>
            <resolution>1</resolution>
            <min_angle>-0.13083332777</min_angle>
            <max_angle>0.13083332777</max_angle>
          </horizontal>
          <vertical>
            <samples>5</samples>
            <resolution>1</resolution>
            <min_angle>-0.13083332777</min_angle>
            <max_angle>0.13083332777</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.1</min>
          <max>1.2</max>
          <resolution>0.01</resolution>
        </range>
      </ray>

      <plugin name="gazebo_ros_rear_right_sonar_controller" filename="libhector_gazebo_ros_sonar.so">
        <gaussianNoise>0.005</gaussianNoise>
        <topicName>/sonar/right</topicName>
        <frameId>rear_right_sonar_link</frameId>
        <updateRate>5</updateRate>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="stereo_left">
    <material>Gazebo/Grey</material>
    <sensor type="camera" name="camera_left">
      <update_rate>10</update_rate>
      <camera name="camera_left">
        <pose>0 0 0 0 -1.5707 1.5707</pose>
        <horizontal_fov>1.0471975512</horizontal_fov>
        <image>
          <width>1288</width>
          <height>964</height>
          <format>BAYER_BGGR8</format>
        </image>
        <clip>
          <near>0.5</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>

      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>10</updateRate>
        <cameraName>camera_left</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>stereo_left</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <!-- Right -->
  <gazebo reference="stereo_right">
    <material>Gazebo/Grey</material>
    <sensor type="camera" name="camera_right">
      <update_rate>10</update_rate>
      <camera name="camera_right">
        <pose>0 0 0 0 -1.5707 1.5707</pose>
        <horizontal_fov>1.0471975512</horizontal_fov>
        <image>
          <width>1288</width>
          <height>964</height>
          <format>BAYER_BGGR8</format>
        </image>
        <clip>
          <near>0.5</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>

      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>10</updateRate>
        <cameraName>camera_right</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>stereo_right</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

  <xacro:macro name="wheel" params="side">
    <gazebo reference="wheel_${side}_link">
      <!-- For wheels, we need high PID values to avoid slippage -->
      <kp>100000000.0</kp>
      <kd>10000.0</kd>
      <!-- Wheels have friction to prevent slippage -->
      <mu1>100.0</mu1>
      <mu2>100.0</mu2>
      <minDepth>0.0</minDepth>
      <material>Gazebo/DarkGrey</material>
      <selfCollide>false</selfCollide>
    </gazebo>
  </xacro:macro>

  <xacro:macro name="castor" params="side">
    <gazebo reference="rotacastor_${side}_link">
      <!-- For castors, we need high PID values to avoid slippage -->
      <kp>100000000.0</kp>
      <kd>10000.0</kd>
      <!-- Castors will slide freely to allow turning -->
      <mu1>0</mu1>
      <mu2>0</mu2>
      <minDepth>0.0</minDepth>
      <material>Gazebo/DarkGrey</material>
      <selfCollide>false</selfCollide>
    </gazebo>
  </xacro:macro>

  <xacro:castor side="left"/>
  <xacro:castor side="right"/>
  <xacro:wheel side="left"/>
  <xacro:wheel side="right"/>

  <!-- Lift surface treatments. -->
  <gazebo reference="lift_link">
    <kp>100</kp>
    <kd>100</kd>
    <mu1>100</mu1>
    <mu2>100</mu2>
    <minDepth>0.0</minDepth>
  </gazebo>

  <!-- Load the main robot description -->
  <xacro:include filename="$(find boxer_description)/urdf/boxer.urdf.xacro"/>
</robot>
